
%{
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
}

%{
int parseNestedBlockComments(const char* data, int length) {
    if(data[0] == '/' && data[1] == '*') {
        int len = 2;
        int depth = 0;
        while (len < length) {
            if(data[len] == '*' && data[len + 1] == '/') {
                if(depth == 0) {
                    len += 2;
                    break;
                } else {
                    len += 2;
                    depth--;
                }
            } else if(data[len] == '/' && data[len + 1] == '*') {
                len += 2;
                depth++;
            } else {
                len++;
            }
        }
        return len;
    } else {
        return 0;
    }
}
}

%return { double }
%ignore /\s/
%ignore /\/\/.*\n?/
%ignore { $length = parseNestedBlockComments($source, $maxlength); }

number := /[0-9]+([.][0-9]+)?(e[+-]?[0-9]+)?/ {
    char* string = parsedTokenToString($term[0]);
    $return = strtod(string, NULL);
    free(string);
};

expr_base := number
           | '(' expr ')'
           | 'abs' '(' expr ')' { $return = fabs($nonterm[0]); }
           | 'min' '(' expr ',' expr ')' { $return = fmin($nonterm[0], $nonterm[1]); }
           | 'max' '(' expr ',' expr ')' { $return = fmax($nonterm[0], $nonterm[1]); }
           | 'exp' '(' expr ')' { $return = exp($nonterm[0]); }
           | 'exp2' '(' expr ')' { $return = exp2($nonterm[0]); }
           | 'ln' '(' expr ')' { $return = log($nonterm[0]); }
           | 'log' '(' expr ',' expr ')' { $return = log($nonterm[1]) / log($nonterm[0]); }
           | 'log10' '(' expr ')' { $return = log10($nonterm[0]); }
           | 'log2' '(' expr ')' { $return = log2($nonterm[0]); }
           | 'sqrt' '(' expr ')' { $return = sqrt($nonterm[0]); }
           | 'cbrt' '(' expr ')' { $return = cbrt($nonterm[0]); }
           | 'ceil' '(' expr ')' { $return = ceil($nonterm[0]); }
           | 'floor' '(' expr ')' { $return = floor($nonterm[0]); }
           | 'trunc' '(' expr ')' { $return = trunc($nonterm[0]); }
           | 'round' '(' expr ')' { $return = round($nonterm[0]); }
           | 'sin' '(' expr ')' { $return = sin($nonterm[0]); }
           | 'cos' '(' expr ')' { $return = cos($nonterm[0]); }
           | 'tan' '(' expr ')' { $return = tan($nonterm[0]); }
           | 'asin' '(' expr ')' { $return = asin($nonterm[0]); }
           | 'acos' '(' expr ')' { $return = acos($nonterm[0]); }
           | 'atan' '(' expr ')' { $return = atan($nonterm[0]); }
           | 'sinh' '(' expr ')' { $return = sinh($nonterm[0]); }
           | 'cosh' '(' expr ')' { $return = cosh($nonterm[0]); }
           | 'tanh' '(' expr ')' { $return = tanh($nonterm[0]); }
           | 'asinh' '(' expr ')' { $return = asinh($nonterm[0]); }
           | 'acosh' '(' expr ')' { $return = acosh($nonterm[0]); }
           | 'atanh' '(' expr ')' { $return = atanh($nonterm[0]); }
           | 'atan2' '(' expr ',' expr ')' { $return = atan2($nonterm[0], $nonterm[1]); };

expr_pow := expr_base '^' expr_pow { $return = pow($nonterm[0], $nonterm[1]); }
          | expr_base;

expr_not := '!' expr_not { $return = !$nonterm[0]; }
          | expr_pow;

expr_mul := expr_mul '*' expr_not { $return = $nonterm[0] * $nonterm[1]; }
          | expr_mul '/' expr_not { $return = $nonterm[0] / $nonterm[1]; }
          | expr_mul '%' expr_not { $return = fmod($nonterm[0], $nonterm[1]); }
          | expr_not;

expr_add := expr_add '+' expr_mul { $return = $nonterm[0] + $nonterm[1]; }
          | expr_add '-' expr_mul { $return = $nonterm[0] - $nonterm[1]; }
          | expr_mul;

expr_cmp := expr_cmp '>' expr_add { $return = $nonterm[0] > $nonterm[1]; }
          | expr_cmp '>=' expr_add { $return = $nonterm[0] >= $nonterm[1]; }
          | expr_cmp '<' expr_add { $return = $nonterm[0] < $nonterm[1]; }
          | expr_cmp '<=' expr_add { $return = $nonterm[0] <= $nonterm[1]; }
          | expr_cmp '==' expr_add { $return = $nonterm[0] == $nonterm[1]; }
          | expr_cmp '!=' expr_add { $return = $nonterm[0] != $nonterm[1]; }
          | expr_add;

expr_and := expr_and '&' expr_cmp { $return = $nonterm[0] && $nonterm[1]; }
          | expr_cmp;

expr_or := expr_or '|' expr_and { $return = $nonterm[0] || $nonterm[1]; }
         | expr_and;

expr := expr_or;

%{
int main(int argc, char** argv) {
    if(argc > 1) {
        ParsedTokens tokens = parsedTokenize(argv[1], strlen(argv[1]));
        double ret = 0;
        if(!parsedReachedEnd(parsed_expr(tokens, &ret))) {
            fprintf(stderr, "Failed to parse.\n");
        } else {
            fprintf(stdout, "%lg\n", ret);
        }
        parsedFreeTokens(tokens);
    } else {
        fprintf(stderr, "Usage: %s EXPRESSION\n", argv[0]);
    }
    return 0;
}
}

